{"version":3,"sources":["components/js/UploadImage.js","actions/index.js","components/js/CssSizeInfo.js","components/js/ImageInfo.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["UploadImage","state","username","getgithub","_this","props","FetchGithub","imageChange","e","file","target","files","item","fr","FileReader","addEventListener","fileLoad","readAsDataURL","ImageState","imageUrl","result","this","react_default","a","createElement","className","type","onChange","Component","connect","githubdata","GitHubReducer","status","payload","dispatch","fetch","concat","then","res","json","Fetch","catch","CssSizeInfo","web","mobile","isNormalInteger","str","n","Math","floor","Number","Infinity","String","setWeb","value","setState","setMobile","_this$props","showInfo","imageInfo","_this$state","width","height","toFixed","ImageInfoReducer","ShowInfoStateReducer","ImageInfo","imageSize","img","Image","src","image","onload","ImageChangeState","ShowInfoState","_this2","onLoad","alt","js_CssSizeInfo","ImageUrlReducer","App","js_UploadImage","js_ImageInfo","Boolean","window","location","hostname","match","combineReducers","arguments","length","undefined","action","Object","objectSpread","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9e272ac5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../css/UploadImage.scss';\nimport { ImageState, FetchGithub } from '../../actions';\n\nclass UploadImage extends Component {\n  state = { username: 'lululee123' };\n  \n  shouldComponentUpdate(){\n    return false;\n  }\n\n  componentDidMount() {\n    this.getgithub(this.state.username);\n  }\n\n  getgithub = (username) => {\n    this.props.FetchGithub(username);\n  }\n\n  imageChange = (e) => {\n    let file  = e.target.files.item(0);\n    let fr = new FileReader();\n    fr.addEventListener('load', this.fileLoad);\n    if (file){\n      fr.readAsDataURL(file);\n    }\n  }\n\n  fileLoad = (e) => {\n    this.props.ImageState({\n      imageUrl: e.target.result\n    })\n  }\n\n  render() {\n    return (\n      <div >\n        <div className=\"uploadImage\">\n          click here or drag here your images for preview and set userprofile_picture data\n          <input type=\"file\" className=\"input\" onChange={ this.imageChange } />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    githubdata: state.GitHubReducer\n  }\n}\n\nexport default connect(mapStateToProps, {ImageState: ImageState, FetchGithub: FetchGithub})(UploadImage);\n","export const ImageState = (status) =>{\n  return {\n    type: \"IMAGE_STATUS\",\n    payload: status\n  }\n}\n\nexport const ImageChangeState = (status) => {\n  return {\n    type: \"IMAGE_CHANGE_STATUS\",\n    payload: status\n  }\n}\n\nexport const ShowInfoState = (status) => {\n  return {\n    type: \"SHOW_INFO_STATE\",\n    payload: status\n  }\n}\n\nconst Fetching = () => {\n  return {\n    type: 'FETCHING'\n  }\n}\nconst Fetch= (res) => {\n  return {\n    type: 'FETCH',\n    res\n  }\n}\nconst FetchError = () => {\n  return {\n    type: 'FETCH_ERROR'\n  }\n}\n\nexport const FetchGithub = (username) => (dispatch) => {\n  dispatch(Fetching());\n  return fetch(`https://api.github.com/users/${username}`).then( res => res.json()).then( (res) => {\n    dispatch(Fetch(res));\n  }).catch( () => {\n    dispatch(FetchError());\n  }) \n}\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../css/CssSizeInfo.scss';\n\nclass CssSizeInfo extends Component {\n  state = {\n    web: 1920, \n    mobile: 1242,\n  }\n\n  isNormalInteger = (str) => {\n    let n = Math.floor(Number(str));\n    return n !== Infinity && String(n) === str && n >= 0;\n  }\n\n  setWeb = (e) => {\n    if ( this.isNormalInteger(e.target.value) ){\n      this.setState({\n        web: e.target.value\n      })\n    }\n  }\n\n  setMobile = (e) => {\n    if ( this.isNormalInteger(e.target.value) ){\n      this.setState({\n        mobile: e.target.value\n      })\n    }\n  }\n\n  render() {\n    const { showInfo, imageInfo } = this.props;\n    const { web, mobile } = this.state;\n\n    if ( showInfo ){\n      return (\n        <div className=\"cssInfoBox\">\n          {/* <div className=\"cssInfoBox__input\">\n            <input placeholder=\"縮放界線(1920)\" onChange={ this.setWeb} />\n            <input placeholder=\"縮放界線(1024)\" onChange={ this.setMobile} />\n          </div> */}\n          <div className=\"cssInfoBox__info\">\n            <div className=\"cssInfoBox__info_main\">\n              <div className=\"cssInfoBox__title\">主圖：</div>\n              <div className=\"cssInfoBox__max\">\n                <div>width: { imageInfo.width }px;</div>\n                <div>height: { imageInfo.height }px;</div>\n              </div>\n              <div className=\"cssInfoBox__web\">\n                <div>width: 100vw;</div>\n                <div>height: { ( ( imageInfo.height / imageInfo.width ) * 100).toFixed(2) }vw;</div>\n              </div>\n              <div className=\"cssInfoBox__mobile\">\n                <div>width: 100vw;</div>\n                <div>height: { ( ( imageInfo.height / imageInfo.width ) * 100 ).toFixed(2) }vw;</div>\n              </div>\n            </div>\n            <div className=\"cssInfoBox__info_normal\">\n              <div className=\"cssInfoBox__title\">元件：</div>\n              <div className=\"cssInfoBox__max\">\n                <div>width: { imageInfo.width }px;</div>\n                <div>height: { imageInfo.height }px;</div>\n              </div>\n              <div className=\"cssInfoBox__web\">\n                <div>width: { ( ( imageInfo.width / web ) * 100 ).toFixed(2) }vw;</div>\n                <div>height: { ( ( imageInfo.height / web ) * 100).toFixed(2) }vw;</div>\n              </div>\n              <div className=\"cssInfoBox__mobile\">\n                <div>width: { ( ( imageInfo.width / mobile ) * 100 ).toFixed(2) }vw;</div>\n                <div>height: { ( ( imageInfo.height / mobile ) * 100 ).toFixed(2) }vw;</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n    return  ''\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    imageInfo: state.ImageInfoReducer, \n    showInfo: state.ShowInfoStateReducer\n  }\n}\nexport default connect(mapStateToProps)(CssSizeInfo);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../css/ImageInfo.scss';\nimport { ImageChangeState, ShowInfoState } from '../../actions';\nimport CssSizeInfo from './CssSizeInfo';\n\nclass ImageInfo extends Component {\n  imageSize = () => {\n    var img = new Image();\n    img.src = this.props.image.imageUrl;\n    img.onload = () => {\n      this.props.ImageChangeState({\n        width: img.width,\n        height: img.height\n      })\n      this.props.ShowInfoState( true )\n    };\n  }\n\n  render() {\n    const { image } = this.props;\n    return (\n      <div className=\"imageInfo\">\n        <img src={ image.imageUrl } onLoad={ () => this.imageSize() } alt=\"\"/>\n        <div className=\"imageInfo__number\">\n          <CssSizeInfo />\n        </div>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    image: state.ImageUrlReducer \n  }\n}\nexport default connect(mapStateToProps, { ImageChangeState: ImageChangeState, ShowInfoState: ShowInfoState })(ImageInfo);\n","import React, { Component } from 'react';\nimport './App.css';\n//import { connect } from 'react-redux';\nimport UploadImage from './components/js/UploadImage';\nimport ImageInfo from './components/js/ImageInfo';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <UploadImage />\n        <ImageInfo />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\n\nconst ImageUrlReducer = (image = { 'imageUrl': '' }, action) => {\n  if (action.type === 'IMAGE_STATUS'){\n    return {...image, imageUrl: action.payload.imageUrl };\n  }\n  return image;\n}\nconst ImageInfoReducer = (image = { 'width': '', 'height': '' }, action) => {\n  if (action.type === 'IMAGE_CHANGE_STATUS'){\n    return { ...image, width: action.payload.width, height: action.payload.height };\n  }\n  return image;\n}\n\nconst ShowInfoStateReducer = (state = false, action) => {\n  if (action.type === \"SHOW_INFO_STATE\"){\n    return action.payload;\n  } \n  return state\n}\n\nconst GitHubReducer = (state, action) => {\n  switch( action.type ){\n    case 'FETCHING':\n      return 'fetching';\n    case 'FETCH':\n      return action.res;\n    case 'FETCH_ERROR':\n      return 'fetch error';\n    default: \n      return 'nothing';  \n  }\n}\n\nexport default combineReducers({\n  ImageUrlReducer: ImageUrlReducer,\n  ImageInfoReducer: ImageInfoReducer,\n  ShowInfoStateReducer: ShowInfoStateReducer,\n  GitHubReducer: GitHubReducer\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport combineReducers from './reducers/index';\nimport thunk from 'redux-thunk';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(combineReducers, /* preloadedState, */ composeEnhancers(\n    applyMiddleware(thunk)\n));\n\nReactDOM.render(    \n    <Provider store = { store }>\n      <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}