{"version":3,"sources":["components/js/UploadImage.js","actions/index.js","components/js/CssSizeInfo.js","components/js/ImageInfo.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["UploadImage","imageChange","e","file","target","files","item","fr","FileReader","addEventListener","_this","fileLoad","readAsDataURL","props","ImageState","imageUrl","result","react_default","a","createElement","className","type","onChange","this","Component","connect","status","payload","CssSizeInfo","state","web","mobile","isNormalInteger","str","n","Math","floor","Number","Infinity","String","setWeb","value","setState","setMobile","showInfo","imageInfo","width","height","toFixed","ImageInfoReducer","ShowInfoStateReducer","ImageInfo","imageSize","img","Image","src","image","onload","ImageChangeState","ShowInfoState","show","_this2","onLoad","alt","js_CssSizeInfo","ImageUrlReducer","App","js_UploadImage","js_ImageInfo","Boolean","window","location","hostname","match","combineReducers","arguments","length","undefined","action","Object","objectSpread","ReactDOM","render","es","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a213d07b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../css/UploadImage.scss';\nimport { ImageState } from '../../actions';\n\nclass UploadImage extends Component {\n  imageChange = (e) => {\n    let file  = e.target.files.item(0);\n    let fr = new FileReader();\n    fr.addEventListener('load', this.fileLoad);\n    if (file){\n      fr.readAsDataURL(file);\n    }\n  }\n\n  fileLoad = (e) => {\n    this.props.ImageState({\n      imageUrl: e.target.result\n    })\n  }\n\n  render() {\n    return (\n      <div >\n        <div className=\"uploadImage\">\n          click here or drag here your images for preview and set userprofile_picture data\n          <input type=\"file\" className=\"input\" onChange={ this.imageChange } />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect('', {ImageState: ImageState})(UploadImage);\n","export const ImageState = (status) =>{\n  return {\n    type: \"IMAGE_STATUS\",\n    payload: status\n  }\n}\n\nexport const ImageChangeState = (status) => {\n  return {\n    type: \"IMAGE_CHANGE_STATUS\",\n    payload: status\n  }\n}\n\nexport const ShowInfoState = (status) => {\n  return {\n    type: \"SHOW_INFO_STATE\",\n    payload: status\n  }\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../css/CssSizeInfo.scss';\n\nclass CssSizeInfo extends Component {\n  state = {\n    web: 1920, \n    mobile: 1024,\n  }\n\n  isNormalInteger = (str) => {\n    let n = Math.floor(Number(str));\n    return n !== Infinity && String(n) === str && n >= 0;\n  }\n\n  setWeb = (e) => {\n    if ( this.isNormalInteger(e.target.value) ){\n      this.setState({\n        web: e.target.value\n      })\n    }\n  }\n\n  setMobile = (e) => {\n    if ( this.isNormalInteger(e.target.value) ){\n      this.setState({\n        mobile: e.target.value\n      })\n    }\n  }\n\n  render() {\n    if (this.props.showInfo){\n      return (\n        <div className=\"cssInfoBox\">\n          {/* <div className=\"cssInfoBox__input\">\n            <input placeholder=\"縮放界線(1920)\" onChange={ this.setWeb} />\n            <input placeholder=\"縮放界線(1024)\" onChange={ this.setMobile} />\n          </div> */}\n          <div className=\"cssInfoBox__info\">\n            <div className=\"cssInfoBox__info_main\">\n              主圖：\n              <div className=\"cssInfoBox__max\">\n                <div>width: { this.props.imageInfo.width }px</div>\n                <div>height: { this.props.imageInfo.height }px</div>\n              </div>\n              <div className=\"cssInfoBox__web\">\n                <div>width: 100vw</div>\n                <div>height: { ( ( this.props.imageInfo.height / this.props.imageInfo.width ) * 100).toFixed(2) }vw</div>\n              </div>\n              <div className=\"cssInfoBox__mobile\">\n                <div>width: 100vw</div>\n                <div>height: { ( ( this.props.imageInfo.height / this.props.imageInfo.width ) * 100 ).toFixed(2) }vw</div>\n              </div>\n            </div>\n            <div className=\"cssInfoBox__info_normal\">\n              元件：\n              <div className=\"cssInfoBox__max\">\n                <div>width: { this.props.imageInfo.width }px</div>\n                <div>height: { this.props.imageInfo.height }px</div>\n              </div>\n              <div className=\"cssInfoBox__web\">\n                <div>width: { ( ( this.props.imageInfo.width / this.state.web ) * 100 ).toFixed(2) }vw</div>\n                <div>height: { ( ( this.props.imageInfo.height / this.state.web ) * 100).toFixed(2) }vw</div>\n              </div>\n              <div className=\"cssInfoBox__mobile\">\n                <div>width: { ( ( this.props.imageInfo.width / this.state.mobile ) * 100 ).toFixed(2) }vw</div>\n                <div>height: { ( ( this.props.imageInfo.height / this.state.mobile ) * 100 ).toFixed(2) }vw</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n    return  ''\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    imageInfo: state.ImageInfoReducer, \n    showInfo: state.ShowInfoStateReducer\n  }\n}\nexport default connect(mapStateToProps)(CssSizeInfo);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../css/ImageInfo.scss';\nimport { ImageChangeState, ShowInfoState } from '../../actions';\nimport CssSizeInfo from './CssSizeInfo';\n\nclass ImageInfo extends Component {\n\n  imageSize = () => {\n    var img = new Image();\n    img.src = this.props.image.imageUrl;\n    img.onload = () => {\n      this.props.ImageChangeState({\n        width: img.width,\n        height: img.height\n      })\n      this.props.ShowInfoState({\n        show: true\n      })\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"imageInfo\">\n        <img src={ this.props.image.imageUrl } onLoad={ () => this.imageSize() } alt=\"\"/>\n        <div className=\"imageInfo__number\">\n          <CssSizeInfo />\n        </div>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    image: state.ImageUrlReducer \n  }\n}\nexport default connect(mapStateToProps, { ImageChangeState: ImageChangeState, ShowInfoState: ShowInfoState })(ImageInfo);\n","import React, { Component } from 'react';\nimport './App.css';\n//import { connect } from 'react-redux';\nimport UploadImage from './components/js/UploadImage';\nimport ImageInfo from './components/js/ImageInfo';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <UploadImage />\n        <ImageInfo />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\n\nconst ImageUrlReducer = (image = {\n  'imageUrl': ''\n}, action) => {\n  if (action.type === 'IMAGE_STATUS'){\n    return {...image, imageUrl: action.payload.imageUrl };\n\n  }\n  return image;\n}\nconst ImageInfoReducer = (image = {\n  'width': '',\n  'height': ''\n}, action) => {\n  if (action.type === 'IMAGE_CHANGE_STATUS'){\n    return { ...image, imageUrl: image.imageUrl, width: action.payload.width, height: action.payload.height };\n\n  }\n  return image;\n}\n\nconst ShowInfoStateReducer = (state = false, action) => {\n  if (action.type === \"SHOW_INFO_STATE\"){\n    return action.payload;\n  } \n  return state\n}\n\nexport default combineReducers({\n  ImageUrlReducer: ImageUrlReducer,\n  ImageInfoReducer: ImageInfoReducer,\n  ShowInfoStateReducer: ShowInfoStateReducer\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport combineReducers from './reducers/index';\n\nReactDOM.render(\n    <Provider store={createStore(combineReducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())}>\n      <App />\n    </Provider>\n,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}